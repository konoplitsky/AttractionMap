/**
 * Generated by orval v7.7.0 üç∫
 * Do not edit manually.
 * Main Map
 * OpenAPI spec version: 1.0
 */
import * as axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';

import type { CreateAttractionDto, GetAttractionDto, UpdateAttractionDto } from './types';

/**
 * @summary –°–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
export const attractionControllerCreate = <TData = AxiosResponse<GetAttractionDto>>(
  createAttractionDto: CreateAttractionDto,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  formData.append('name', createAttractionDto.name);
  formData.append('description', createAttractionDto.description);
  formData.append('rating', createAttractionDto.rating.toString());
  formData.append('photo', createAttractionDto.photo);
  formData.append('location', createAttractionDto.location);
  formData.append('latitude', createAttractionDto.latitude.toString());
  formData.append('longitude', createAttractionDto.longitude.toString());

  return axios.default.post(`/api/attraction`, formData, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export const attractionControllerGetAll = <TData = AxiosResponse<GetAttractionDto[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/api/attraction`, options);
};

/**
 * @summary –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
export const attractionControllerUpdate = <TData = AxiosResponse<GetAttractionDto>>(
  updateAttractionDto: UpdateAttractionDto,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  formData.append('id', updateAttractionDto.id);
  if (updateAttractionDto.name !== undefined) {
    formData.append('name', updateAttractionDto.name);
  }
  if (updateAttractionDto.description !== undefined) {
    formData.append('description', updateAttractionDto.description);
  }
  if (updateAttractionDto.rating !== undefined) {
    formData.append('rating', updateAttractionDto.rating.toString());
  }
  if (updateAttractionDto.photo !== undefined) {
    formData.append('photo', updateAttractionDto.photo);
  }
  if (updateAttractionDto.location !== undefined) {
    formData.append('location', updateAttractionDto.location);
  }
  if (updateAttractionDto.latitude !== undefined) {
    formData.append('latitude', updateAttractionDto.latitude.toString());
  }
  if (updateAttractionDto.longitude !== undefined) {
    formData.append('longitude', updateAttractionDto.longitude.toString());
  }

  return axios.default.put(`/api/attraction`, formData, options);
};

/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
export const attractionControllerGetById = <TData = AxiosResponse<GetAttractionDto>>(
  id: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.get(`/api/attraction/${id}`, options);
};

/**
 * @summary –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */
export const attractionControllerDelete = <TData = AxiosResponse<void>>(
  id: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.default.delete(`/api/attraction/${id}`, options);
};

export type AttractionControllerCreateResult = AxiosResponse<GetAttractionDto>;
export type AttractionControllerGetAllResult = AxiosResponse<GetAttractionDto[]>;
export type AttractionControllerUpdateResult = AxiosResponse<GetAttractionDto>;
export type AttractionControllerGetByIdResult = AxiosResponse<GetAttractionDto>;
export type AttractionControllerDeleteResult = AxiosResponse<void>;
